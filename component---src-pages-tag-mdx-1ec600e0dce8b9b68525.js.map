{"version":3,"sources":["webpack:///./src/pages/tag.mdx"],"names":["query","_frontmatter","layoutProps","MDXContent","components","props","mdxType","title","parentName","code","image","data","soundSystem","value","model","amplifier","isMDXComponent"],"mappings":"yVAUO,IAAMA,EAAQ,YAqBRC,EAAe,CAC1B,MAAS,MACT,aAAgB,GAQZC,EAAc,CAClBF,QACAC,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAQA,QAAQ,UACd,YAAC,IAAD,CAAKC,MAAM,MAAMD,QAAQ,QACzB,qCACA,qCACA,2UAGA,oCACA,+GAA8F,0BAAYE,WAAW,KAAvB,SAA9F,cAEA,2CACA,sBACE,kBAAIA,WAAW,MAAf,6BACA,kBAAIA,WAAW,MAAf,kCAEF,mDACA,gNAEA,sDACA,wIAEA,sBACE,kBAAIA,WAAW,MAAf,oDACA,kBAAIA,WAAW,MAAf,yDAEF,gDACA,yKAEA,YAAC,IAAD,CAASC,KAAK,0CAA0CC,MAAOL,EAAMM,KAAKC,YAAYC,MAAOC,MAAOT,EAAMM,KAAKG,MAAMD,MAAOP,QAAQ,YACpI,2CACA,2EAA0D,0BAAYE,WAAW,KAAvB,gBAA1D,yDACmB,0BAAYA,WAAW,KAAvB,aADnB,QACiF,0BAAYA,WAAW,KAAvB,WADjF,kBAEA,+GACA,YAAC,IAAD,CAASC,KAAK,sDAAsDC,MAAOL,EAAMM,KAAKI,UAAUF,MAAOC,MAAOT,EAAMM,KAAKG,MAAMD,MAAOP,QAAQ,cAMpJH,EAAWa,gBAAiB","file":"component---src-pages-tag-mdx-1ec600e0dce8b9b68525.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport Example from \"../components/example\";\nimport { Link } from \"gatsby\";\nimport { graphql } from \"gatsby\";\nexport const query = graphql`\nquery {\n  model: archieModel(name: {eq: \"sound-system\"}) {\n    value\n  }\n  soundSystem: svgImage(args: {\n    name: {eq: \"sound-system\"},\n    scope: {eq: \"sound-system\"},\n    type: {eq: \"tag\"}\n  }) {\n    value\n  }\n  amplifier: svgImage(args: {\n    name: {eq: \"sound-system\"},\n    scope: {eq: \"sound-system/amplifier\"},\n    type: {eq: \"tag\"}\n  }) {\n    value\n  }\n}\n`;\nexport const _frontmatter = {\n  \"title\": \"Tag\",\n  \"menuPosition\": 5\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  query,\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Layout mdxType=\"Layout\">\n      <SEO title=\"Tag\" mdxType=\"SEO\" />\n      <h1>{`Tag diagram`}</h1>\n      <h2>{`Description`}</h2>\n      <p>{`The tag diagram is designed to 'burrow down' into components to reveal elements with specific tags.\nOur usage usually use tags to represent different 'disciplines' in a system, e.g. software, mechanical,\nelectronics. We find this helpful for getting a low-level view of a system relevant for small teams.`}</p>\n      <h2>{`Definition`}</h2>\n      <p>{`A tag diagram shows the context of the specified element, with respect to a particular `}<inlineCode parentName=\"p\">{`scope`}</inlineCode>{`\nelement.`}</p>\n      <p>{`The view contains:`}</p>\n      <ol>\n        <li parentName=\"ol\">{`Main elements of interest`}</li>\n        <li parentName=\"ol\">{`Relevant associated elements.`}</li>\n      </ol>\n      <h3>{`Main elements of interest`}</h3>\n      <p>{`The main elements of interest are the 'oldest' descendents of the scoping element that have the\nspecified tag. Or, if the scoping element has no children, the scoping element itself.`}</p>\n      <h3>{`Relevant associated elements`}</h3>\n      <p>{`A relevant associated element is one that is associated to one of the main elements of interest,\nwhere either:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`Its got any tag and hasn't got a tagged ancestor`}</li>\n        <li parentName=\"ul\">{`It has no children, and hasn't got a tagged ancestor`}</li>\n      </ul>\n      <h2>{`Example: entire system`}</h2>\n      <p>{`The simplest 'context' is one with the scope of the entire system.\nAll the 'top level' elements have been added (children of the world scope!).`}</p>\n      <Example code=\"archie tag model.yml --tag sound-system\" image={props.data.soundSystem.value} model={props.data.model.value} mdxType=\"Example\" />\n      <h2>{`Example: sub-item`}</h2>\n      <p>{`If we change the scope to a sub-item, in this case `}<inlineCode parentName=\"p\">{`sound-system`}</inlineCode>{`, we see that it is opened up\nand it's two children, `}<inlineCode parentName=\"p\">{`amplifier`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`speaker`}</inlineCode>{` are revealed.`}</p>\n      <p>{`The only connections that are shown are those that connect directly to these children.`}</p>\n      <Example code=\"archie tag model.yml --scope sound-system/amplifier\" image={props.data.amplifier.value} model={props.data.model.value} mdxType=\"Example\" />\n    </Layout>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}