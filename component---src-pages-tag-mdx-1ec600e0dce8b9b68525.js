(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{"3d5Q":function(e,t,n){"use strict";n.r(t),n.d(t,"query",(function(){return o})),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return m}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var a=n("7ljp"),l=n("Bl7J"),i=n("vrFN"),s=n("CtqP");n("Wbzz");var o="878859628",c={title:"Tag",menuPosition:5},r={query:o,_frontmatter:c};function m(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,["components"]);return Object(a.b)("wrapper",Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(l.a,{mdxType:"Layout"},Object(a.b)(i.a,{title:"Tag",mdxType:"SEO"}),Object(a.b)("h1",null,"Tag diagram"),Object(a.b)("h2",null,"Description"),Object(a.b)("p",null,"The tag diagram is designed to 'burrow down' into components to reveal elements with specific tags.\nOur usage usually use tags to represent different 'disciplines' in a system, e.g. software, mechanical,\nelectronics. We find this helpful for getting a low-level view of a system relevant for small teams."),Object(a.b)("h2",null,"Definition"),Object(a.b)("p",null,"A tag diagram shows the context of the specified element, with respect to a particular ",Object(a.b)("inlineCode",{parentName:"p"},"scope"),"\nelement."),Object(a.b)("p",null,"The view contains:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Main elements of interest"),Object(a.b)("li",{parentName:"ol"},"Relevant associated elements.")),Object(a.b)("h3",null,"Main elements of interest"),Object(a.b)("p",null,"The main elements of interest are the 'oldest' descendents of the scoping element that have the\nspecified tag. Or, if the scoping element has no children, the scoping element itself."),Object(a.b)("h3",null,"Relevant associated elements"),Object(a.b)("p",null,"A relevant associated element is one that is associated to one of the main elements of interest,\nwhere either:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Its got any tag and hasn't got a tagged ancestor"),Object(a.b)("li",{parentName:"ul"},"It has no children, and hasn't got a tagged ancestor")),Object(a.b)("h2",null,"Example: entire system"),Object(a.b)("p",null,"The simplest 'context' is one with the scope of the entire system.\nAll the 'top level' elements have been added (children of the world scope!)."),Object(a.b)(s.a,{code:"archie tag model.yml --tag sound-system",image:n.data.soundSystem.value,model:n.data.model.value,mdxType:"Example"}),Object(a.b)("h2",null,"Example: sub-item"),Object(a.b)("p",null,"If we change the scope to a sub-item, in this case ",Object(a.b)("inlineCode",{parentName:"p"},"sound-system"),", we see that it is opened up\nand it's two children, ",Object(a.b)("inlineCode",{parentName:"p"},"amplifier")," and ",Object(a.b)("inlineCode",{parentName:"p"},"speaker")," are revealed."),Object(a.b)("p",null,"The only connections that are shown are those that connect directly to these children."),Object(a.b)(s.a,{code:"archie tag model.yml --scope sound-system/amplifier",image:n.data.amplifier.value,model:n.data.model.value,mdxType:"Example"})))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-tag-mdx-1ec600e0dce8b9b68525.js.map