(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{hD4x:function(e,t,n){"use strict";n.r(t),n.d(t,"query",(function(){return s})),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return p}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var o=n("7ljp"),a=n("Bl7J"),l=n("vrFN"),i=n("CtqP");n("Wbzz");var s="1306307729",c={title:"Context",menuPosition:4},r={query:s,_frontmatter:c};function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(o.b)("wrapper",Object.assign({},r,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)(a.a,{mdxType:"Layout"},Object(o.b)(l.a,{title:"Context",mdxType:"SEO"}),Object(o.b)("h1",null,"Context diagram"),Object(o.b)("h2",null,"Description"),Object(o.b)("p",null,"The context diagram is designed to break down components only where useful. We find this useful to\nget a 'top-down' functional impression of a system, with the option to generate diagrams that\nsuccessively 'open the lid' on components, whilst keeping others 'boxed up'."),Object(o.b)("h2",null,"Definition"),Object(o.b)("p",null,"A context diagram shows the context of the specified element, with respect to a particular ",Object(o.b)("inlineCode",{parentName:"p"},"scope")," element."),Object(o.b)("p",null,"The view contains:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Main elements of interest"),Object(o.b)("li",{parentName:"ol"},"Relevant associated elements.")),Object(o.b)("h3",null,"Main elements of interest"),Object(o.b)("p",null,"The main elements of interest are those that are children of the scoping element.\nOr, if the scoping element has no children, the scoping element itself."),Object(o.b)("h3",null,"Relevant associated elements"),Object(o.b)("p",null,"A relevant associated element is one that is associated to one of the main elements of interest,\nwhere either:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Its immediate parent is an ancestor of the scope"),Object(o.b)("li",{parentName:"ul"},"It is a root element.")),Object(o.b)("h2",null,"Example: entire system"),Object(o.b)("p",null,"The simplest 'context' is one with the scope of the entire system.\nAll the 'top level' elements have been added (children of the world scope!)."),Object(o.b)(i.a,{code:"archie context model.yml",image:n.data.landscape.value,model:n.data.model.value,mdxType:"Example"}),Object(o.b)("h2",null,"Example: sub-item"),Object(o.b)("p",null,"If we change the scope to a sub-item, in this case ",Object(o.b)("inlineCode",{parentName:"p"},"sound-system"),", we see that it is opened up\nand it's two children, ",Object(o.b)("inlineCode",{parentName:"p"},"amplifier")," and ",Object(o.b)("inlineCode",{parentName:"p"},"speaker")," are revealed."),Object(o.b)("p",null,"The only connections that are shown are those that connect directly to these children."),Object(o.b)(i.a,{code:"archie context model.yml --scope sound-system",image:n.data.soundSystem.value,model:n.data.model.value,mdxType:"Example"})))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-context-mdx-b452f4155410f5842d50.js.map